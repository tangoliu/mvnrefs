定制库到Maven本地仓库
这里有2个案例，需要手动发出Maven命令包括一个 jar 到 Maven 的本地资源库。
1.要使用的第三方 jar 不存在于 Maven 的中心储存库中。
2.您创建了一个自定义的 jar ，而另一个 Maven 项目需要使用。
PS，还是有很多 jar 不支持 Maven 的。这两种案例都可以通过执行maven命令或者手动添加的方式进行，第一个案例通过执行maven命令介绍，第二个案例通过手动介绍。

1.案例学习
例如，kaptcha，它是一个流行的第三方Java库，它被用来生成 “验证码” 的图片，以阻止垃圾邮件，但它不在 Maven 的中央仓库中。
在本教程中，我们将告诉你如何安装 “kaptcha” jar 到Maven 的本地资源库。
(1) mvn 安装
下载 “kaptcha”，将其解压缩并将 kaptcha-version.jar 复制到其他地方，比如：C盘。
发出下面的命令：
mvn install:install-file -Dfile=c:\kaptcha-{version}.jar -DgroupId=com.google.code -DartifactId=kaptcha -Dversion={version} -Dpackaging=jar
示例：
D:\>mvn install:install-file -Dfile=c:\kaptcha-2.3.jar -DgroupId=com.google.code 
-DartifactId=kaptcha -Dversion=2.3 -Dpackaging=jar
[INFO] Scanning for projects...
[INFO] Searching repository for plugin with prefix: 'install'.
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [install:install-file] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [install:install-file]
[INFO] Installing c:\kaptcha-2.3.jar to 
D:\maven_repo\com\google\code\kaptcha\2.3\kaptcha-2.3.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: < 1 second
[INFO] Finished at: Tue May 12 13:41:42 SGT 2014
[INFO] Final Memory: 3M/6M
[INFO] ------------------------------------------------------------------------

现在，“kaptcha” jar被复制到 Maven 本地存储库。

(2) pom.xml
安装完毕后，就在 pom.xml 中声明 kaptcha 的坐标。
<dependency>
      <groupId>com.google.code</groupId>
      <artifactId>kaptcha</artifactId>
      <version>2.3</version>
 </dependency>

(3) 完成
构建它，现在 “kaptcha” jar 能够从你的 Maven 本地存储库检索了。

2.案例学习
需求：需要添加一个自定义的类库到当前项目中。假定当前的类库文件名为：abc.jar.
（1）找到当前Maven的Repository类库位置
一般默认情况下，在window系统下是当前用户目录： C:\Users\ZhangSan.  其中ZhangSan就是系统中当前的用户名. 
在Linux系统下是/home/${USER_NAME}.
在此目录下，有一个隐藏的目录.m2/repository专门用来存放Maven系统中管理的各种类库文件。
（2）假定当前abc.jar的版本为1.0
（3）在新增POM.xml中新增的Dependency片段为：
   <dependency>  
     <groupId>MyLocalJar</groupId>  
     <artifactId>abc</artifactId>   
     <version>1.0</version>  
   </dependency>    
（4）在.m2/repository下需要新建的目录为：
    MyLocalJar/abc/1.0/abc-1.0.jar
    如果groupId为 MyLocalJar.myjar.util，则会被分解为3层的目录结构：MyLocalJar/myjar/util/abc/1.0/abc-1.0.jar. 
    注意：这里的abc.jar已经被新增了版本号，重名为abc-1.0.jar.
最后刷新系统就可以，正常使用了。

===========================================================================================================================


如何从Maven远程存储库下载依赖  
根据 Apache Maven 的说明:
Downloading in Maven is triggered by a project declaring a dependency that is not present in the local repository 
(or for a SNAPSHOT, when the remote repository contains one that is newer). 
By default, Maven will download from the central repository.
在Maven中，当你声明的库不存在于本地存储库中，也没有存在于Maven中心储存库，该过程将停止并将错误消息输出到 Maven 控制台。  
  
1. 示例
 以org.jvnet.localizer为例，只适用于 Java.net资源库（https://maven.java.net/content/repositories/public/）。在pom.xml文件中这样配置：  
<dependency>
        <groupId>org.jvnet.localizer</groupId>
        <artifactId>localizer</artifactId>
        <version>1.8</version>
</dependency>
假如当你建立这个 Maven 项目，它的依赖将找不到（以<dependency>声明，会在本地资源库和中央仓库找），从而失败并输出错误消息。  
2. 声明Java.net储存库
告诉 Maven 来如何来获得 Java.net 的依赖，你需要声明远程仓库的地址在 pom.xml 文件中，如下面这样：
<repositories>
	<repository>
	    <id>java.net</id>
	    <url>https://maven.java.net/content/repositories/public/</url>
	</repository>
</repositories>

现在，Maven的依赖库查询顺序更改为：
1.在 Maven 本地资源库中搜索，如果没有找到，进入第 2 步，否则退出。
2.在 Maven 中央存储库搜索，如果没有找到，进入第 3 步，否则退出。
3.在java.net Maven的远程存储库搜索，如果没有找到，提示错误信息，否则退出。  
 
如何添加maven远程仓库
默认情况下，Maven从Maven中央仓库下载所有依赖关系。但是，有些库丢失在中央存储库，只有在Java.net或JBoss的储存库远程仓库中能找到。
1. Java.net资源库
添加Java.net远程仓库的详细信息在“pom.xml”文件。  
<project ...>
<repositories>
    <repository>
      <id>java.net</id>
      <url>https://maven.java.net/content/repositories/public/</url>
    </repository>
 </repositories>
</project>
注：旧的 “http://download.java.net/maven/2” 仍然可用, 但建议升级到最新储存库。  

2. JBoss Maven存储库
 添加JBoss远程仓库的详细信息在 “pom.xml” 文件中。
<project ...>
    <repositories>
      <repository>
	      <id>JBoss repository</id>
	      <url>http://repository.jboss.org/nexus/content/groups/public/</url>
      </repository>
    </repositories>
</project>
注意：旧的 http://repository.jboss.com/maven2/ 已过时，不再使用。   


===========================================================================================================================




